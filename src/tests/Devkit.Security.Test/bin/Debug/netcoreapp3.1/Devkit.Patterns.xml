<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Devkit.Patterns</name>
    </assembly>
    <members>
        <member name="T:Devkit.Patterns.Converters.JsonPathConverter">
            <summary>
            Json path converter allows JsonProperty to map complex json objects into C# objects.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.Converters.JsonPathConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Devkit.Patterns.Converters.JsonPathConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Devkit.Patterns.Converters.JsonPathConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Devkit.Patterns.CQRS.Behaviors.HandlerPerformanceBehavior`2">
            <summary>
            Logs low performing handlers to notify the development team of possible enhancements.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <seealso cref="T:MediatR.IPipelineBehavior`2" />
        </member>
        <member name="F:Devkit.Patterns.CQRS.Behaviors.HandlerPerformanceBehavior`2._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Devkit.Patterns.CQRS.Behaviors.HandlerPerformanceBehavior`2._timer">
            <summary>
            The timer.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.HandlerPerformanceBehavior`2.#ctor(Serilog.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.Behaviors.HandlerPerformanceBehavior`2"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.HandlerPerformanceBehavior`2.Handle(`0,System.Threading.CancellationToken,MediatR.RequestHandlerDelegate{`1})">
            <summary>
            Pipeline handler. Perform any additional behavior and await the <paramref name="next" /> delegate as necessary.
            </summary>
            <param name="request">Incoming request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="next">Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler.</param>
            <returns>
            Awaitable task returning the <typeparamref name="TResponse" />.
            </returns>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Behaviors.RequestLoggerBehavior`1">
            <summary>
            This behavior logs all incoming requests prior to execution.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <seealso cref="T:MediatR.Pipeline.IRequestPreProcessor`1" />
        </member>
        <member name="F:Devkit.Patterns.CQRS.Behaviors.RequestLoggerBehavior`1._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.RequestLoggerBehavior`1.#ctor(Serilog.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.Behaviors.RequestLoggerBehavior`1"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.RequestLoggerBehavior`1.Process(`0,System.Threading.CancellationToken)">
            <summary>
            Process method executes before calling the Handle method on your handler.
            </summary>
            <param name="request">Incoming request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            An awaitable task.
            </returns>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Behaviors.RequestValidationBehavior`2">
            <summary>
            The pipeline behavior that validates incoming requests before it gets processed by the handler.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <seealso cref="T:MediatR.IPipelineBehavior`2" />
        </member>
        <member name="F:Devkit.Patterns.CQRS.Behaviors.RequestValidationBehavior`2._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="F:Devkit.Patterns.CQRS.Behaviors.RequestValidationBehavior`2._validators">
            <summary>
            The validators.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.RequestValidationBehavior`2.#ctor(System.Collections.Generic.IEnumerable{FluentValidation.IValidator{`0}},Serilog.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.Behaviors.RequestValidationBehavior`2" /> class.
            </summary>
            <param name="validators">The validators.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.RequestValidationBehavior`2.Handle(`0,System.Threading.CancellationToken,MediatR.RequestHandlerDelegate{`1})">
            <summary>
            Pipeline handler. Perform any additional behavior and await the <paramref name="next" /> delegate as necessary.
            </summary>
            <param name="request">Incoming request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="next">Awaitable delegate for the next action in the pipeline. Eventually this delegate represents the handler.</param>
            <returns>
            Awaitable task returning the <typeparamref name="TResponse" />.
            </returns>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Behaviors.ResponseBehavior`2">
            <summary>
            The behavior that checks if the request was successful, if not - throws an exception.
            </summary>
            <typeparam name="TRequest">The type of the request.</typeparam>
            <typeparam name="TResponse">The type of the response.</typeparam>
            <seealso cref="T:MediatR.Pipeline.IRequestPostProcessor`2" />
        </member>
        <member name="F:Devkit.Patterns.CQRS.Behaviors.ResponseBehavior`2._logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.ResponseBehavior`2.#ctor(Serilog.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.Behaviors.ResponseBehavior`2"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Behaviors.ResponseBehavior`2.Process(`0,`1,System.Threading.CancellationToken)">
            <summary>
            Process method executes after the Handle method on your handler.
            </summary>
            <param name="request">Request instance.</param>
            <param name="response">Response instance.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            An awaitable task.
            </returns>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Command.CommandHandlerBase`2">
            <summary>
            The command handler base class.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Command.CommandHandlerBase`2.#ctor(Devkit.Data.Interfaces.IRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.Command.CommandHandlerBase`2"/> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Command.CommandRequestBase`1">
            <summary>
            The command input base class.
            </summary>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <seealso cref="T:Devkit.Patterns.CQRS.RequestBase`1" />
        </member>
        <member name="T:Devkit.Patterns.CQRS.Contracts.IResponse">
            <summary>
            The response contract.
            </summary>
        </member>
        <member name="P:Devkit.Patterns.CQRS.Contracts.IResponse.Exceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>
            The exceptions.
            </value>
        </member>
        <member name="P:Devkit.Patterns.CQRS.Contracts.IResponse.IsSuccessful">
            <summary>
            Gets a value indicating whether this instance is successful.
            </summary>
            <value>
              <c>true</c> if this instance is successful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Extensions.CQRSExtensions">
            <summary>
            CQRS pattern extensions.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Extensions.CQRSExtensions.AddMediatRAssemblies(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds the MediatR assemblies that contains the CQRS classes. To override a behavior of a command
            by introducing a new library, make sure to place the overriding assembly before the assembly that is being
            overriden.
            </summary>
            <param name="services">The services.</param>
            <param name="assemblies">The assemblies.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Extensions.CQRSExtensions.AddMediatRHandlers(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Type},System.Action{MediatR.MediatRServiceConfiguration})">
            <summary>
            Adds the MediatR handler that contains the CQRS classes. To override a behavior of a command
            by introducing a new library, make sure to place the overriding assembly before the assembly that is being
            overriden.
            </summary>
            <param name="services">The services.</param>
            <param name="handlers">The handlers.</param>
            <param name="configuration">The configuration.</param>
            <returns>The service collection.</returns>
        </member>
        <member name="M:Devkit.Patterns.CQRS.Extensions.CQRSExtensions.AddValidationAssemblies(Microsoft.Extensions.DependencyInjection.IMvcBuilder,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Adds the fluent validation.
            </summary>
            <param name="builder">The builder.</param>
            <param name="assemblies">The assemblies.</param>
            <returns>An MVC builder instance.</returns>
        </member>
        <member name="T:Devkit.Patterns.CQRS.HandlerBase`2">
            <summary>
            The handler base class.
            </summary>
            <typeparam name="TRequest">The type of the input.</typeparam>
            <typeparam name="TResponse">The type of the output.</typeparam>
            <seealso cref="T:MediatR.IRequestHandler`2" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Devkit.Patterns.CQRS.HandlerBase`2.#ctor(Devkit.Data.Interfaces.IRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.HandlerBase`2" /> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="P:Devkit.Patterns.CQRS.HandlerBase`2.Repository">
            <summary>
            Gets the repository.
            </summary>
            <value>
            The repository.
            </value>
        </member>
        <member name="P:Devkit.Patterns.CQRS.HandlerBase`2.Request">
            <summary>
            Gets the input.
            </summary>
            <value>
            The input.
            </value>
        </member>
        <member name="P:Devkit.Patterns.CQRS.HandlerBase`2.Response">
            <summary>
            Gets or sets the response.
            </summary>
            <value>
            The response.
            </value>
        </member>
        <member name="M:Devkit.Patterns.CQRS.HandlerBase`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.CQRS.HandlerBase`2.Handle(`0,System.Threading.CancellationToken)">
            <summary>
            Handles a request.
            </summary>
            <param name="request">The request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>
            Response from the request.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.CQRS.HandlerBase`2.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Devkit.Patterns.CQRS.HandlerBase`2.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            The code that is executed to perform the command or query.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="M:Devkit.Patterns.CQRS.HandlerBase`2.RevertOperation(System.Threading.CancellationToken)">
            <summary>
            Reverts the operation.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task.</returns>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Query.QueryHandlerBase`2">
            <summary>
            The query handler base class.
            </summary>
            <typeparam name="TRequest">The type of the input.</typeparam>
            <typeparam name="TResponse">The type of the output.</typeparam>
            <seealso cref="T:Devkit.Patterns.CQRS.HandlerBase`2" />
        </member>
        <member name="M:Devkit.Patterns.CQRS.Query.QueryHandlerBase`2.#ctor(Devkit.Data.Interfaces.IRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.Query.QueryHandlerBase`2"/> class.
            </summary>
            <param name="repository">The repository.</param>
        </member>
        <member name="T:Devkit.Patterns.CQRS.Query.QueryRequestBase`1">
            <summary>
            The query input base class.
            </summary>
            <typeparam name="TResponse">The type of the output.</typeparam>
            <seealso cref="T:Devkit.Patterns.CQRS.RequestBase`1" />
        </member>
        <member name="T:Devkit.Patterns.CQRS.RequestBase`1">
            <summary>
            The input base class.
            </summary>
            <typeparam name="TResponse">The type of the output.</typeparam>
        </member>
        <member name="T:Devkit.Patterns.CQRS.ResponseBase">
            <summary>
            The output base class.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.CQRS.ResponseBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.ResponseBase"/> class.
            </summary>
        </member>
        <member name="P:Devkit.Patterns.CQRS.ResponseBase.Exceptions">
            <summary>
            Gets the exceptions.
            </summary>
            <value>
            The exceptions.
            </value>
        </member>
        <member name="P:Devkit.Patterns.CQRS.ResponseBase.IsSuccessful">
            <summary>
            Gets a value indicating whether this instance is successful.
            </summary>
            <value>
              <c>true</c> if this instance is successful; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Devkit.Patterns.CQRS.ResponseSet`1">
            <summary>
            A response that represents a set of T.
            </summary>
            <typeparam name="T">Type of set.</typeparam>
        </member>
        <member name="M:Devkit.Patterns.CQRS.ResponseSet`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.CQRS.ResponseSet`1"/> class.
            </summary>
        </member>
        <member name="P:Devkit.Patterns.CQRS.ResponseSet`1.Items">
            <summary>
            Gets the items.
            </summary>
            <value>
            The items.
            </value>
        </member>
        <member name="T:Devkit.Patterns.EnumerationBase">
            <summary>
            The enumeration base class.
            </summary>
            <seealso cref="T:System.IComparable" />
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.EnumerationBase"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="displayName">The display name.</param>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.EnumerationBase"/> class.
            </summary>
        </member>
        <member name="P:Devkit.Patterns.EnumerationBase.DisplayName">
            <summary>
            Gets the display name.
            </summary>
            <value>
            The display name.
            </value>
        </member>
        <member name="P:Devkit.Patterns.EnumerationBase.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.AbsoluteDifference(Devkit.Patterns.EnumerationBase,Devkit.Patterns.EnumerationBase)">
            <summary>
            Absolutes the difference.
            </summary>
            <param name="firstValue">The first value.</param>
            <param name="secondValue">The second value.</param>
            <returns>The difference between 2 different enumerations.</returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.FromDisplayName``1(System.String)">
            <summary>
            Froms the display name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="displayName">The display name.</param>
            <returns>Parsed value from a display name.</returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.FromValue``1(System.Int32)">
            <summary>
            Froms the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>Parsed value from a value.</returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.GetAll``1">
            <summary>
            Gets all.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>An enumrable list of all possible values for this enumeration.</returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.op_Inequality(Devkit.Patterns.EnumerationBase,Devkit.Patterns.EnumerationBase)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.op_LessThan(Devkit.Patterns.EnumerationBase,Devkit.Patterns.EnumerationBase)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.op_LessThanOrEqual(Devkit.Patterns.EnumerationBase,Devkit.Patterns.EnumerationBase)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.op_Equality(Devkit.Patterns.EnumerationBase,Devkit.Patterns.EnumerationBase)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.op_GreaterThan(Devkit.Patterns.EnumerationBase,Devkit.Patterns.EnumerationBase)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.op_GreaterThanOrEqual(Devkit.Patterns.EnumerationBase,Devkit.Patterns.EnumerationBase)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.CompareTo(System.Object)">
            <summary>
            Compares to.
            </summary>
            <param name="obj">The other.</param>
            <returns>An int value that identifies whether an instance should be before or after the current instance.</returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Devkit.Patterns.EnumerationBase.Parse``2(``1,System.String,System.Func{``0,System.Boolean})">
            <summary>
            Parses the specified value.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
            <param name="predicate">The predicate.</param>
            <returns>Parsed value.</returns>
            <exception cref="T:System.ApplicationException"></exception>
        </member>
        <member name="T:Devkit.Patterns.Exceptions.AppException">
            <summary>
            The request exception.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.AppException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.AppException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.AppException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.AppException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.AppException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.AppException" /> class.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.AppException.#ctor(System.Collections.Generic.IReadOnlyCollection{FluentValidation.Results.ValidationFailure})">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.AppException" /> class.
            </summary>
            <param name="failures">The failures.</param>
        </member>
        <member name="P:Devkit.Patterns.Exceptions.AppException.Errors">
            <summary>
            Gets the failures.
            </summary>
            <value>
            The failures.
            </value>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.AppException.Add(System.String,System.String)">
            <summary>
            Adds the error.
            </summary>
            <param name="key">The key.</param>
            <param name="errorMessage">The error message.</param>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.AppException.AddRange(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the errors.
            </summary>
            <param name="key">The key.</param>
            <param name="errorMessages">The error messages.</param>
        </member>
        <member name="T:Devkit.Patterns.Exceptions.EnumerationException">
            <summary>
            The EnumerationException is an exception that is thrown for class enumeration issues.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.EnumerationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.EnumerationException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.EnumerationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.EnumerationException"/> class.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.EnumerationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.EnumerationException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Devkit.Patterns.Exceptions.NotFoundException">
            <summary>
            Exception for when a content we're querying does not exist.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Devkit.Patterns.Exceptions.NotFoundException.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.NotFoundException"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.NotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.NotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.NotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.NotFoundException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Devkit.Patterns.Exceptions.NotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Devkit.Patterns.Exceptions.NotFoundException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Devkit.Patterns.Extensions.ValidatorExtensions">
            <summary>
            The ValidatorExtensions extends the IRuleBuilderInitial capabilities.
            </summary>
        </member>
        <member name="M:Devkit.Patterns.Extensions.ValidatorExtensions.ValidBase64Image``1(FluentValidation.IRuleBuilderOptions{``0,System.String})">
            <summary>
            Valids the base64 image.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ruleBuilderOptions">The rule builder options.</param>
            <returns>
            An instance of a rule builder options.
            </returns>
        </member>
    </members>
</doc>
